/*Copyright (C) 2012-2014 Carsten Paproth

This file is part of Skat-Konferenz.

Skat-Konferenz is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Skat-Konferenz is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Skat-Konferenz.  If not, see <http://www.gnu.org/licenses/>.*/
// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef ui_h
#define ui_h
#include <FL/Fl.H>

class UILock {
public:
  UILock();
  ~UILock();
};
#include <FL/Fl_Double_Window.H>
#include <map>
#include <string>
#include <boost/function/function0.hpp>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include "GlTable.h"
#include "GlImage.h"
#include <FL/Fl_Box.H>
#include "BidButton.h"
#include <FL/Fl_Button.H>
#include <FL/Fl_Input.H>
#include <FL/Fl_Check_Button.H>
#include <FL/Fl_Value_Input.H>
#include <FL/Fl_Color_Chooser.H>
#include "LogDisplay.h"
#include <FL/Fl_Browser.H>

class UserInterface {
  Fl_Preferences prefs; 
public:
  std::map<std::string, boost::function<void(void)> > f; 
  UserInterface(void);
private:
  Fl_Double_Window *mainwnd;
  void cb_mainwnd_i(Fl_Double_Window*, void*);
  static void cb_mainwnd(Fl_Double_Window*, void*);
public:
  SK::GlTable *table;
private:
  void cb_table_i(SK::GlTable*, void*);
  static void cb_table(SK::GlTable*, void*);
public:
  SK::GlImage *leftimage;
  SK::GlImage *rightimage;
  SK::GlImage *midimage;
  Fl_Box *info;
  SK::BidButton *bid;
private:
  void cb_bid_i(SK::BidButton*, void*);
  static void cb_bid(SK::BidButton*, void*);
public:
  Fl_Button *fold;
private:
  void cb_fold_i(Fl_Button*, void*);
  static void cb_fold(Fl_Button*, void*);
public:
  Fl_Box *gameinfo;
  Fl_Button *diamonds;
private:
  void cb_diamonds_i(Fl_Button*, void*);
  static void cb_diamonds(Fl_Button*, void*);
public:
  Fl_Button *hearts;
private:
  void cb_hearts_i(Fl_Button*, void*);
  static void cb_hearts(Fl_Button*, void*);
public:
  Fl_Button *spades;
private:
  void cb_spades_i(Fl_Button*, void*);
  static void cb_spades(Fl_Button*, void*);
public:
  Fl_Button *clubs;
private:
  void cb_clubs_i(Fl_Button*, void*);
  static void cb_clubs(Fl_Button*, void*);
public:
  Fl_Button *grand;
private:
  void cb_grand_i(Fl_Button*, void*);
  static void cb_grand(Fl_Button*, void*);
public:
  Fl_Button *null;
private:
  void cb_null_i(Fl_Button*, void*);
  static void cb_null(Fl_Button*, void*);
public:
  Fl_Button *nullouvert;
private:
  void cb_nullouvert_i(Fl_Button*, void*);
  static void cb_nullouvert(Fl_Button*, void*);
public:
  Fl_Group *hand;
  Fl_Button *schneider;
private:
  void cb_schneider_i(Fl_Button*, void*);
  static void cb_schneider(Fl_Button*, void*);
public:
  Fl_Button *schwarz;
private:
  void cb_schwarz_i(Fl_Button*, void*);
  static void cb_schwarz(Fl_Button*, void*);
public:
  Fl_Button *ouvert;
private:
  void cb_ouvert_i(Fl_Button*, void*);
  static void cb_ouvert(Fl_Button*, void*);
public:
  Fl_Button *skat;
private:
  void cb_skat_i(Fl_Button*, void*);
  static void cb_skat(Fl_Button*, void*);
public:
  Fl_Button *announce;
private:
  void cb_announce_i(Fl_Button*, void*);
  static void cb_announce(Fl_Button*, void*);
public:
  Fl_Button *dealout;
private:
  void cb_dealout_i(Fl_Button*, void*);
  static void cb_dealout(Fl_Button*, void*);
public:
  Fl_Button *disclose;
private:
  void cb_disclose_i(Fl_Button*, void*);
  static void cb_disclose(Fl_Button*, void*);
public:
  Fl_Button *contrare;
private:
  void cb_contrare_i(Fl_Button*, void*);
  static void cb_contrare(Fl_Button*, void*);
public:
  Fl_Button *giveup;
private:
  void cb_giveup_i(Fl_Button*, void*);
  static void cb_giveup(Fl_Button*, void*);
public:
  Fl_Input *chat;
private:
  void cb_chat_i(Fl_Input*, void*);
  static void cb_chat(Fl_Input*, void*);
  void cb_Restart_i(Fl_Button*, void*);
  static void cb_Restart(Fl_Button*, void*);
  void cb_Playback_i(Fl_Check_Button*, void*);
  static void cb_Playback(Fl_Check_Button*, void*);
public:
  Fl_Input *address;
private:
  void cb_address_i(Fl_Input*, void*);
  static void cb_address(Fl_Input*, void*);
public:
  Fl_Value_Input *port;
private:
  void cb_port_i(Fl_Value_Input*, void*);
  static void cb_port(Fl_Value_Input*, void*);
public:
  Fl_Value_Input *bandwidth;
private:
  void cb_bandwidth_i(Fl_Value_Input*, void*);
  static void cb_bandwidth(Fl_Value_Input*, void*);
  void cb_Connect_i(Fl_Button*, void*);
  static void cb_Connect(Fl_Button*, void*);
  void cb_Stats_i(Fl_Button*, void*);
  static void cb_Stats(Fl_Button*, void*);
public:
  Fl_Check_Button *autoconnect;
private:
  void cb_autoconnect_i(Fl_Check_Button*, void*);
  static void cb_autoconnect(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *weakport;
  Fl_Input *name;
private:
  void cb_name_i(Fl_Input*, void*);
  static void cb_name(Fl_Input*, void*);
public:
  Fl_Input *secret;
private:
  void cb_secret_i(Fl_Input*, void*);
  static void cb_secret(Fl_Input*, void*);
public:
  Fl_Button *bgcolor;
private:
  void cb_bgcolor_i(Fl_Button*, void*);
  static void cb_bgcolor(Fl_Button*, void*);
public:
  Fl_Check_Button *foldrule;
private:
  void cb_foldrule_i(Fl_Check_Button*, void*);
  static void cb_foldrule(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *contrarerule;
private:
  void cb_contrarerule_i(Fl_Check_Button*, void*);
  static void cb_contrarerule(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *bockrule;
private:
  void cb_bockrule_i(Fl_Check_Button*, void*);
  static void cb_bockrule(Fl_Check_Button*, void*);
public:
  Fl_Check_Button *junkrule;
private:
  void cb_junkrule_i(Fl_Check_Button*, void*);
  static void cb_junkrule(Fl_Check_Button*, void*);
public:
  Fl_Browser *listing;
  ~UserInterface(void);
private:
  UserInterface(const UserInterface&);
  void operator=(const UserInterface&);
};
#endif
