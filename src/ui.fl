# data file for the Fltk User Interface Designer (fluid)
version 1.0303 
header_name {.h} 
code_name {.cpp}
comment {/*Copyright (C) 2012-2014, 2021 Carsten Paproth

This file is part of Skat-Konferenz.

Skat-Konferenz is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Skat-Konferenz is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Skat-Konferenz.  If not, see <http://www.gnu.org/licenses/>.*/} {in_source in_header
} 

class UILock {open
} {
  Function {UILock()} {} {
    code {Fl::lock();} {}
  }
  Function {~UILock()} {} {
    code {Fl::unlock();} {}
  }
} 

class UserInterface {open
} {
  decl {Fl_Preferences prefs;} {private local
  }
  decl {std::map<std::string, boost::function<void()> > f;} {public local
  }
  Function {UserInterface():prefs(Fl_Preferences::USER, "cpaproth", "sk")} {open
  } {
    Fl_Window mainwnd {
      label {Skat-Konferenz}
      callback {mainwnd->hide();} open
      xywh {564 231 960 700} type Double labelsize 11 align 80 resizable
      code0 {\#include <map>}
      code1 {\#include <string>}
      code2 {\#include <boost/function/function0.hpp>} size_range {960 700 0 0} visible
    } {
      Fl_Tabs {} {open
        xywh {0 0 960 700} labelsize 11
      } {
        Fl_Group {} {
          label Skat open selected
          xywh {0 25 960 675} labelsize 11
        } {
          Fl_Box table {
            callback {f["table event"]();}
            xywh {0 265 640 435} box FLAT_BOX color 1908830464 labelsize 11
            code0 {\#include "GlTable.h"}
            class {SK::GlTable}
          }
          Fl_Group {} {open
            xywh {0 25 640 240} resizable
          } {
            Fl_Box leftimage {
              xywh {0 25 320 240} box FLAT_BOX color 56 labelsize 11
              code0 {\#include "GlImage.h"}
              class {SK::GlImage}
            }
            Fl_Box rightimage {
              xywh {320 25 320 240} box FLAT_BOX color 56 labelsize 11
              class {SK::GlImage}
            }
          }
          Fl_Group {} {open
            xywh {640 25 320 415}
          } {
            Fl_Group {} {
              xywh {640 25 320 85} box DOWN_BOX labelsize 11
            } {
              Fl_Box info {
                label Information
                xywh {640 35 320 25} labelfont 1 labelsize 11 align 32
              }
              Fl_Button bid {
                label Reizen
                callback {f["game bid"]();}
                xywh {680 70 105 25} box PLASTIC_UP_BOX color 2 labelfont 1 labelsize 11
                code0 {\#include "BidButton.h"}
                class {SK::BidButton}
              }
              Fl_Button fold {
                label Passen
                callback {f["game fold"]();}
                xywh {815 70 105 25} box PLASTIC_UP_BOX color 1 labelfont 1 labelsize 11
              }
            }
            Fl_Group {} {open
              xywh {640 110 320 240} box DOWN_BOX labelsize 11
            } {
              Fl_Box gameinfo {
                label Spielinfo
                xywh {640 120 320 25} labelfont 1 labelsize 11 align 32
              }
              Fl_Group {} {open
                xywh {700 155 200 70} labelsize 11
              } {
                Fl_Button diamonds {
                  callback {f["game select"]();}
                  tooltip {Karo ist Trumpf.} image {../images/diamonds.xpm} xywh {700 155 50 35} type Radio value 1 labelsize 11
                }
                Fl_Button hearts {
                  callback {f["game select"]();}
                  tooltip {Herz ist Trumpf.} image {../images/hearts.xpm} xywh {750 155 50 35} type Radio labelsize 11
                }
                Fl_Button spades {
                  callback {f["game select"]();}
                  tooltip {Pik ist Trumpf.} image {../images/spades.xpm} xywh {800 155 50 35} type Radio labelsize 11
                }
                Fl_Button clubs {
                  callback {f["game select"]();}
                  tooltip {Kreuz ist Trumpf.} image {../images/clubs.xpm} xywh {850 155 50 35} type Radio labelsize 11
                }
                Fl_Button grand {
                  label Grand
                  callback {f["game select"]();}
                  tooltip {Nur Buben sind Trumpf.} xywh {700 190 60 35} type Radio labelfont 1 labelsize 11
                }
                Fl_Button null {
                  label Null
                  callback {f["game select"]();}
                  tooltip {Nullspiel, es gibt kein Trumpf.} xywh {760 190 45 35} type Radio labelfont 1 labelsize 11
                }
                Fl_Button nullouvert {
                  label {Null Ouvert}
                  callback {f["game select"]();}
                  tooltip {Offenes Nullspiel, es gibt kein Trumpf.} xywh {805 190 95 35} type Radio labelfont 1 labelsize 11
                }
              }
              Fl_Group hand {open
                xywh {700 225 200 35} labelsize 11
              } {
                Fl_Button schneider {
                  label Schneider
                  callback {if (!schneider->value()) {
  schwarz->value(false);
  ouvert->value(false);
}
f["game select"]();}
                  tooltip {Handspiel, Schneider angesagt.} xywh {700 225 80 35} type Toggle labelfont 1 labelsize 11
                }
                Fl_Button schwarz {
                  label Schwarz
                  callback {if (schwarz->value())
  schneider->value(true);
else
  ouvert->value(false);
f["game select"]();}
                  tooltip {Handspiel, Schneider und Schwarz angesagt.} xywh {780 225 65 35} type Toggle labelfont 1 labelsize 11
                }
                Fl_Button ouvert {
                  label Ouvert
                  callback {if (ouvert->value()) {
  schneider->value(true);
  schwarz->value(true);
}
f["game select"]();}
                  tooltip {Offenes Handspiel, Schneider und Schwarz angesagt.} xywh {845 225 55 35} type Toggle labelfont 1 labelsize 11
                }
              }
              Fl_Button skat {
                label {Skat aufnehmen}
                callback {f["skat take"]();}
                tooltip {Kein Handspiel.} xywh {700 270 200 25} labelfont 1 labelsize 11
              }
              Fl_Button announce {
                label {Spiel ansagen}
                callback {f["game announce"]();}
                xywh {700 305 200 25} labelfont 1 labelsize 11
              }
            }
            Fl_Group {} {
              xywh {640 350 320 90} box DOWN_BOX labelsize 11
            } {
              Fl_Button dealout {
                label {Karten austeilen}
                callback {f["game dealout"]();}
                xywh {655 365 140 25} color 2 labelfont 1 labelsize 11
              }
              Fl_Button disclose {
                label {Karten aufdecken}
                callback {f["game disclose"]();}
                xywh {655 400 140 25} labelfont 1 labelsize 11
              }
              Fl_Button contrare {
                label {Kontra / Re}
                callback {f["game contrare"]();}
                xywh {810 365 140 25} type Toggle color 1 labelfont 1 labelsize 11
              }
              Fl_Button giveup {
                label {Spiel abbrechen}
                callback {f["game giveup"]();}
                xywh {810 400 140 25} type Toggle labelfont 1 labelsize 11
              }
            }
          }
          Fl_Box midimage {
            callback {f["audio mute"]();}
            xywh {640 440 320 240} box FLAT_BOX color 56 labelsize 11
            code0 {midimage->set();}
            class {SK::GlImage}
          }
          Fl_Input chat {
            callback {f["chat message"]();}
            xywh {640 680 320 20} box FLAT_BOX labelsize 11 when 8 textsize 11
          }
        }
        Fl_Group {} {
          label Options open
          xywh {0 25 960 675} box PLASTIC_UP_BOX labelsize 11 hide
        } {
          Fl_Group {} {
            label Audio open
            xywh {625 95 210 165} box PLASTIC_DOWN_BOX labelfont 1 labelsize 15 align 49
          } {
            Fl_Button {} {
              label {Restart Audio Stream}
              callback {f["audio restart"]();}
              private tooltip {Restart the audio stream and print the current CPU load of the audio stream into the log window.} xywh {655 135 150 25} labelsize 11
            }
            Fl_Check_Button {} {
              label {Playback Microphone}
              callback {f["audio toggle"]();}
              tooltip {When activated, the microphone recording will not be broadcasted but directly played back. Use this to adjust your mixer settings, e.g. to reduce echoes.} xywh {655 180 150 25} down_box DOWN_BOX labelsize 11
            }
            Fl_Check_Button {} {
              label {Noise Gate}
              callback {f["audio noise"]();}
              tooltip {Activate the noise gate to reduce the volume of background noises. Deactivate the noise gate, if the background noise is actual signal, e.g. music.} xywh {655 215 145 25} down_box DOWN_BOX value 1 labelsize 11
            }
          }
          Fl_Group {} {
            label Network open
            xywh {125 95 360 295} box PLASTIC_DOWN_BOX labelfont 1 labelsize 15 align 49
          } {
            Fl_Input address {
              label {IP Address}
              callback {prefs.set("ipaddress", address->value());}
              tooltip {The IP address or hostname of the server you want to connect to. If you want to be the server (one of the peers has to be the server), tick the Server checkbox and click Connect. Then tell the other peers your publicly reachable IP address or hostname, and UDP port.} xywh {260 135 195 25} labelsize 11 textsize 11
              code0 {char* c; prefs.get("ipaddress", c, ""); address->value(c); delete[] c;}
            }
            Fl_Value_Input port {
              label {UDP Port}
              callback {if (port->value() < 0)
  port->value(0);
if (port->value() > 65535)
  port->value(65535);
prefs.set("udpport", port->value());}
              tooltip {The UDP port of the server. The peers randomly choose ports. Traffic from and to these ports has to be allowed by the firewall/NAT.} xywh {260 185 195 25} color -256 labelsize 11 when 4 maximum 65535 step 1 textsize 11
              code0 {double d; prefs.get("udpport", d, 34588); port->value(d < 0? 0: d > 65535? 65535: d);}
            }
            Fl_Value_Input bandwidth {
              label {Upload Bandwidth}
              callback {if (bandwidth->value() < 8000)
  bandwidth->value(8000);
prefs.set("bandwidth", bandwidth->value());}
              tooltip {Maximal bandwidth for the upload in bytes per second. This value shouldn't be greater than the upload speed of your internet connection. The bandwidth is distributed among the connnected peers, the audio stream always needs 2500 bytes per second per peer.} xywh {260 235 195 25} color -256 labelsize 11 when 4 minimum 8000 maximum 1e+09 step 1000 textsize 11
              code0 {double d; prefs.get("bandwidth", d, 16000); bandwidth->value(d < 8000? 8000: d);}
            }
            Fl_Button {} {
              label Connect
              callback {f["network connect"]();}
              tooltip {Connect to the server or run the server. If a connection can be established, the videoconferencing starts. If 3 peers are connected with each other, the game starts.} xywh {260 285 195 25} labelsize 11
            }
            Fl_Button {} {
              label Stats
              callback {f["network stats"]();}
              tooltip {Print some stats on the connected peers into the log window.} xywh {260 335 195 25} labelsize 11
            }
            Fl_Check_Button server {
              label Server
              callback {prefs.set("server", server->value());}
              tooltip {When activated, the program will run as the server after the Connect button has been pressed.} xywh {175 285 85 25} down_box DOWN_BOX labelsize 11
              code0 {int i; prefs.get("server", i, 0); server->value(i != 0);}
            }
          }
          Fl_Group {} {
            label Player open
            xywh {590 455 245 175} box PLASTIC_DOWN_BOX labelfont 1 labelsize 15 align 49
          } {
            Fl_Input name {
              label Name
              callback {prefs.set("username", name->value());
f["name change"]();}
              tooltip {Your name during the game.} xywh {645 495 165 25} labelsize 11 textsize 11
              code0 {char* c; prefs.get("username", c, "nobody"); name->value(c); delete[] c;}
            }
            Fl_Input secret {
              label Secret
              callback {prefs.set("secret", secret->value());}
              tooltip {The secret and the time are used to seed your random number generator at program start.} xywh {645 540 165 25} labelsize 11 textsize 11
              code0 {char* c; prefs.get("secret", c, ""); secret->value(c); delete[] c;}
            }
            Fl_Button bgcolor {
              label Color
              callback {uchar r, g, b;
Fl::get_color(bgcolor->color(), r, g, b);
fl_color_chooser("Choose Color", r, g, b);

Fl_Color color(fl_rgb_color(r, g, b));
bgcolor->color(color);
bgcolor->redraw();
table->set_bgcolor(color);
prefs.set("bgcolor", (int)color);}
              tooltip {Choose the color of the table background.} xywh {645 585 165 25} labelsize 11 align 4
              code0 {\#include <FL/Fl_Color_Chooser.H>}
              code1 {int i; prefs.get("bgcolor", i, (int)FL_GRAY); bgcolor->color(i); table->set_bgcolor(i);}
            }
          }
          Fl_Group {} {
            label {Sonderregeln (SR)} open
            tooltip {Es gelten die Regeln der internationalen Skatordnung. Es sind nur die Sonderregeln wirksam, die bei allen Spielern aktiviert sind. Ramsch wird ohne Schieben und Grand Hand gespielt. Der Spieler mit den wenigsten Augen gewinnt das Ramsch-Spiel mit 23 Punkten, macht er gar keinen Stich (Jungfrau), gewinnt er mit 46 Punkten, außer einem Spieler gelingt es alle Stiche zu bekommen (Durchmarsch), dann gewinnt dieser mit 120 Punkten.} xywh {130 455 255 175} box PLASTIC_DOWN_BOX labelfont 1 labelsize 15 align 49
          } {
            Fl_Check_Button foldrule {
              label {Ramschen statt Einpassen (E)}
              callback {prefs.set("rulefold", foldrule->value());
f["rule change"]();}
              tooltip {Wenn alle Spieler passen, wird mit der Hand Ramsch ohne Schieben gespielt. Der Spieler mit den wenigsten Augen bekommt ein gewonnenes Nullspiel gutgeschrieben.} xywh {155 495 210 25} down_box DOWN_BOX labelsize 11
              code0 {int i; prefs.get("rulefold", i, 0); foldrule->value(i != 0);}
            }
            Fl_Check_Button contrarerule {
              label {Kontra und Re (K)}
              callback {prefs.set("rulecontrare", contrarerule->value());
f["rule change"]();}
              tooltip {Gegenspieler, die nicht bei 18 gepasst haben, dürfen bis zur 4. ausgespielten Karte Kontra sagen. Der Alleinspieler darf daraufhin bis zur 7. ausgespielten Karte Re sagen. Kontra und Re verdoppeln jeweils die Punktzahl des Spiels.} xywh {155 525 135 25} down_box DOWN_BOX labelsize 11
              code0 {int i; prefs.get("rulecontrare", i, 0); contrarerule->value(i != 0);}
            }
            Fl_Check_Button bockrule {
              label {Bockrunde (B)}
              callback {prefs.set("rulebock", bockrule->value());
f["rule change"]();}
              tooltip {In einer Bockrunde werden die Punkte jedes Spiels verdoppelt. Eine Bockrunde wird gespielt nach verlorenem Kontra-Spiel, Kontra-Re-Spiel, Spiel mit 60 zu 60 Augen oder gewonnenem Spiel mit wenigstens 100 Punkten Grundwert.} xywh {155 555 115 25} down_box DOWN_BOX labelsize 11
              code0 {int i; prefs.get("rulebock", i, 0); bockrule->value(i != 0);}
            }
            Fl_Check_Button junkrule {
              label {Ramschrunde (R)}
              callback {prefs.set("rulejunk", junkrule->value());
f["rule change"]();}
              tooltip {Eine Ramschrunde wird unter den gleichen Bedingungen wie eine Bockrunde ausgelöst. Auch hier werden die Punkte der Spiele verdoppelt, allerdings ist jedes Spiel Ramsch. Wenn Bock- und Ramschrunde gespielt werden soll, dann folgt die Ramsch- auf die Bockrunde.} xywh {155 585 135 25} down_box DOWN_BOX labelsize 11
              code0 {int i; prefs.get("rulejunk", i, 0); junkrule->value(i != 0);}
            }
          }
          Fl_Group {} {
            label Video open
            xywh {590 315 245 85} box PLASTIC_DOWN_BOX labelfont 1 labelsize 15 align 17
          } {
            Fl_Slider quality {
              label Denoising
              callback {prefs.set("videoquality", quality->value());}
              tooltip {Quality of the denoising of the received video signals. Higher quality uses more CPU cycles and thus is slower.} xywh {675 355 135 25} type {Horz Knob} labelsize 11 align 4 maximum 10 step 1 value 3
              code0 {int v; prefs.get("videoquality", v, 3); quality->value(v < 0? 0: v > 10? 10: v);}
            }
          }
        }
        Fl_Group {} {
          label Log open
          xywh {0 25 960 675} labelsize 11 hide resizable
        } {
          Fl_Text_Display {} {
            private xywh {0 25 480 675} box DOWN_BOX color 55 labelsize 11 textsize 11 resizable
            code0 {\#include "LogDisplay.h"}
            class {SK::LogDisplay}
          }
          Fl_Browser listing {
            xywh {480 25 480 675} selection_color 215 labelsize 11 textsize 9
            code0 {static const int widths[] = {130, 50, 80, 80, 80, 60, 0}; listing->column_widths(widths);}
            code1 {listing->add("@B49@cSpiel\\t@B49@cPunkte\\t@B49@cDu\\t@B49@cLinks\\t@B49@cRechts\\t@B49@cSR");}
          }
        }
      }
    }
    code {mainwnd->show();
chat->take_focus();} {}
  }
  Function {~UserInterface()} {open
  } {
    code {delete mainwnd;} {}
  }
  Function {UserInterface(const UserInterface&):prefs("", "", "")} {private
  } {}
  Function {operator=(const UserInterface&)} {private
  } {}
} 
